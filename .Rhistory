B2.C <- length (B2 [B2 == "C"])
B2.G <- length (B2 [B2 == "G"])
B3 <- matrix.B[ ,3]
B3.A <- length (B3 [B3 == "A"])
B3.T <- length (B3 [B3 == "T"])
B3.C <- length (B3 [B3 == "C"])
B3.G <- length (B3 [B3 == "G"])
count.matrix.A <- matrix (c (A1.A, A1.T, A1.C, A1.G, A2.A, A2.T, A2.C, A2.G, A3.A, A3.T, A3.C, A3.G), ncol=4, byrow=T)
count.matrix.B <- matrix (c (B1.A, B1.T, B1.C, B1.G, B2.A, B2.T, B2.C, B2.G, B3.A, B3.T, B3.C, B3.G), ncol=4, byrow=T)
colnames (count.matrix.A) <- c ("A", "T", "C", "G")
colnames (count.matrix.B) <- c ("A", "T", "C", "G")
## R SCRIPT FOR PA CALCULATION:
## Take sequences and process them into matrixes:
sequence.A <- readLines (file("http://j.mp/ifNNaE"))
length.seqA <- sequence.A [2: length (sequence.A)]
table.A <- mapply (substr, length.seqA, 1:399, 1:399, USE.NAMES=FALSE)
matrix.A <- matrix (table.A, ncol=3, byrow=T)
sequence.B <- readLines (file("http://j.mp/gXjItZ"))
length.seqB <- sequence.B [2: length (sequence.B)]
table.B <- mapply (substr, length.seqB, 1:1026, 1:1026, USE.NAMES=FALSE)
matrix.B <- matrix (table.B, ncol=3, byrow=T)
## Build PCM for sequences A and B:
A1 <- matrix.A [ ,1]
A1.A <- length (A1 [A1 == "A"])
A1.C <- length (A1 [A1 == "C"])
A1.G <- length (A1 [A1 == "G"])
A1.T <- length (A1 [A1 == "T"])
A2 <- matrix.A [ ,2]
A2.A <- length (A2 [A2 == "A"])
A2.C <- length (A2 [A2 == "C"])
A2.G <- length (A2 [A2 == "G"])
A2.T <- length (A2 [A2 == "T"])
A3 <- matrix.A [ ,3]
A3.A <- length (A3 [A3 == "A"])
A3.C <- length (A3 [A3 == "C"])
A3.G <- length (A3 [A3 == "G"])
A3.T <- length (A3 [A3 == "T"])
B1 <- matrix.B[ ,1]
B1.A <- length (B1 [B1 == "A"])
B1.T <- length (B1 [B1 == "T"])
B1.C <- length (B1 [B1 == "C"])
B1.G <- length (B1 [B1 == "G"])
B2 <- matrix.B[ ,2]
B2.A <- length (B2 [B2 == "A"])
B2.T <- length (B2 [B2 == "T"])
B2.C <- length (B2 [B2 == "C"])
B2.G <- length (B2 [B2 == "G"])
B3 <- matrix.B[ ,3]
B3.A <- length (B3 [B3 == "A"])
B3.T <- length (B3 [B3 == "T"])
B3.C <- length (B3 [B3 == "C"])
B3.G <- length (B3 [B3 == "G"])
count.matrix.A <- matrix (c (A1.A, A1.T, A1.C, A1.G, A2.A, A2.T, A2.C, A2.G, A3.A, A3.T, A3.C, A3.G), ncol=4, byrow=T)
count.matrix.B <- matrix (c (B1.A, B1.T, B1.C, B1.G, B2.A, B2.T, B2.C, B2.G, B3.A, B3.T, B3.C, B3.G), ncol=4, byrow=T)
colnames (count.matrix.A) <- c ("A", "T", "C", "G")
colnames (count.matrix.B) <- c ("A", "T", "C", "G")
## R SCRIPT FOR PA CALCULATION:
## Take sequences and process them into matrixes:
sequence.A <- readLines (file("http://j.mp/ifNNaE"))
length.seqA <- sequence.A [2: length (sequence.A)]
table.A <- mapply (substr, length.seqA, 1:399, 1:399, USE.NAMES=FALSE)
matrix.A <- matrix (table.A, ncol=3, byrow=T)
sequence.B <- readLines (file("http://j.mp/gXjItZ"))
length.seqB <- sequence.B [2: length (sequence.B)]
table.B <- mapply (substr, length.seqB, 1:1026, 1:1026, USE.NAMES=FALSE)
matrix.B <- matrix (table.B, ncol=3, byrow=T)
## Build PCM for sequences A and B:
A1 <- matrix.A [ ,1]
A1.A <- length (A1 [A1 == "A"])
A1.C <- length (A1 [A1 == "C"])
A1.G <- length (A1 [A1 == "G"])
A1.T <- length (A1 [A1 == "T"])
A2 <- matrix.A [ ,2]
A2.A <- length (A2 [A2 == "A"])
A2.C <- length (A2 [A2 == "C"])
A2.G <- length (A2 [A2 == "G"])
A2.T <- length (A2 [A2 == "T"])
A3 <- matrix.A [ ,3]
A3.A <- length (A3 [A3 == "A"])
A3.C <- length (A3 [A3 == "C"])
A3.G <- length (A3 [A3 == "G"])
A3.T <- length (A3 [A3 == "T"])
B1 <- matrix.B[ ,1]
B1.A <- length (B1 [B1 == "A"])
B1.T <- length (B1 [B1 == "T"])
B1.C <- length (B1 [B1 == "C"])
B1.G <- length (B1 [B1 == "G"])
B2 <- matrix.B[ ,2]
B2.A <- length (B2 [B2 == "A"])
B2.T <- length (B2 [B2 == "T"])
B2.C <- length (B2 [B2 == "C"])
B2.G <- length (B2 [B2 == "G"])
B3 <- matrix.B[ ,3]
B3.A <- length (B3 [B3 == "A"])
B3.T <- length (B3 [B3 == "T"])
B3.C <- length (B3 [B3 == "C"])
B3.G <- length (B3 [B3 == "G"])
count.matrix.A <- matrix (c (A1.A, A1.T, A1.C, A1.G, A2.A, A2.T, A2.C, A2.G, A3.A, A3.T, A3.C, A3.G), ncol=4, byrow=T)
count.matrix.B <- matrix (c (B1.A, B1.T, B1.C, B1.G, B2.A, B2.T, B2.C, B2.G, B3.A, B3.T, B3.C, B3.G), ncol=4, byrow=T)
colnames (count.matrix.A) <- c ("A", "T", "C", "G")
colnames (count.matrix.B) <- c ("A", "T", "C", "G")
## PA calculation:
frequency.matrix.A <- matrix (rep (NA, length (count.matrix.A)), ncol=4, byrow=T)
frequency.matrix.B <- matrix (rep (NA, length (count.matrix.B)), ncol=4, byrow=T)
for (i in 1: length (count.matrix.A))
{
frequency.matrix.A[i] <- round((count.matrix.A [i] / 133), digits=3)
}
for (j in 1: length (count.matrix.B))
{
frequency.matrix.B[j] <- round((count.matrix.B [j] / 342), digits=3)
}
PA.A <- sum((0.25-frequency.matrix.A)^2)
PA.B <- sum((0.25-frequency.matrix.B)^2)
## R SCRIPT FOR PA CALCULATION:
## Take sequences and process them into matrixes:
sequence.A <- readLines (file("http://j.mp/ifNNaE"))
length.seqA <- sequence.A [2: length (sequence.A)]
table.A <- mapply (substr, length.seqA, 1:399, 1:399, USE.NAMES=FALSE)
matrix.A <- matrix (table.A, ncol=3, byrow=T)
sequence.B <- readLines (file("http://j.mp/gXjItZ"))
length.seqB <- sequence.B [2: length (sequence.B)]
table.B <- mapply (substr, length.seqB, 1:1026, 1:1026, USE.NAMES=FALSE)
matrix.B <- matrix (table.B, ncol=3, byrow=T)
## Build PCM for sequences A and B:
A1 <- matrix.A [ ,1]
A1.A <- length (A1 [A1 == "A"])
A1.C <- length (A1 [A1 == "C"])
A1.G <- length (A1 [A1 == "G"])
A1.T <- length (A1 [A1 == "T"])
A2 <- matrix.A [ ,2]
A2.A <- length (A2 [A2 == "A"])
A2.C <- length (A2 [A2 == "C"])
A2.G <- length (A2 [A2 == "G"])
A2.T <- length (A2 [A2 == "T"])
A3 <- matrix.A [ ,3]
A3.A <- length (A3 [A3 == "A"])
A3.C <- length (A3 [A3 == "C"])
A3.G <- length (A3 [A3 == "G"])
A3.T <- length (A3 [A3 == "T"])
B1 <- matrix.B[ ,1]
B1.A <- length (B1 [B1 == "A"])
B1.T <- length (B1 [B1 == "T"])
B1.C <- length (B1 [B1 == "C"])
B1.G <- length (B1 [B1 == "G"])
B2 <- matrix.B[ ,2]
B2.A <- length (B2 [B2 == "A"])
B2.T <- length (B2 [B2 == "T"])
B2.C <- length (B2 [B2 == "C"])
B2.G <- length (B2 [B2 == "G"])
B3 <- matrix.B[ ,3]
B3.A <- length (B3 [B3 == "A"])
B3.T <- length (B3 [B3 == "T"])
B3.C <- length (B3 [B3 == "C"])
B3.G <- length (B3 [B3 == "G"])
count.matrix.A <- matrix (c (A1.A, A1.T, A1.C, A1.G, A2.A, A2.T, A2.C, A2.G, A3.A, A3.T, A3.C, A3.G), ncol=4, byrow=T)
count.matrix.B <- matrix (c (B1.A, B1.T, B1.C, B1.G, B2.A, B2.T, B2.C, B2.G, B3.A, B3.T, B3.C, B3.G), ncol=4, byrow=T)
colnames (count.matrix.A) <- c ("A", "T", "C", "G")
colnames (count.matrix.B) <- c ("A", "T", "C", "G")
## PA calculation:
frequency.matrix.A <- matrix (rep (NA, length (count.matrix.A)), ncol=4, byrow=T)
frequency.matrix.B <- matrix (rep (NA, length (count.matrix.B)), ncol=4, byrow=T)
for (i in 1: length (count.matrix.A))
{
frequency.matrix.A[i] <- round((count.matrix.A [i] / 133), digits=3)
}
for (j in 1: length (count.matrix.B))
{
frequency.matrix.B[j] <- round((count.matrix.B [j] / 342), digits=3)
}
PA.A <- sum((0.25-frequency.matrix.A)^2)
PA.B <- sum((0.25-frequency.matrix.B)^2)
PA.A
PA.A <- sum((0.25-frequency.matrix.A)^2)
PA.A
PA.B
## R SCRIPT FOR PA CALCULATION:
## Take sequences and process them into matrixes:
sequence.A <- readLines (file("http://j.mp/ifNNaE"))
length.seqA <- sequence.A [2: length (sequence.A)]
table.A <- mapply (substr, length.seqA, 1:399, 1:399, USE.NAMES=FALSE)
matrix.A <- matrix (table.A, ncol=3, byrow=T)
sequence.B <- readLines (file("http://j.mp/gXjItZ"))
length.seqB <- sequence.B [2: length (sequence.B)]
table.B <- mapply (substr, length.seqB, 1:1026, 1:1026, USE.NAMES=FALSE)
matrix.B <- matrix (table.B, ncol=3, byrow=T)
## Build PCM for sequences A and B:
A1 <- matrix.A [ ,1]
A1.A <- length (A1 [A1 == "A"])
A1.C <- length (A1 [A1 == "C"])
A1.G <- length (A1 [A1 == "G"])
A1.T <- length (A1 [A1 == "T"])
A2 <- matrix.A [ ,2]
A2.A <- length (A2 [A2 == "A"])
A2.C <- length (A2 [A2 == "C"])
A2.G <- length (A2 [A2 == "G"])
A2.T <- length (A2 [A2 == "T"])
A3 <- matrix.A [ ,3]
A3.A <- length (A3 [A3 == "A"])
A3.C <- length (A3 [A3 == "C"])
A3.G <- length (A3 [A3 == "G"])
A3.T <- length (A3 [A3 == "T"])
B1 <- matrix.B[ ,1]
B1.A <- length (B1 [B1 == "A"])
B1.T <- length (B1 [B1 == "T"])
B1.C <- length (B1 [B1 == "C"])
B1.G <- length (B1 [B1 == "G"])
B2 <- matrix.B[ ,2]
B2.A <- length (B2 [B2 == "A"])
B2.T <- length (B2 [B2 == "T"])
B2.C <- length (B2 [B2 == "C"])
B2.G <- length (B2 [B2 == "G"])
B3 <- matrix.B[ ,3]
B3.A <- length (B3 [B3 == "A"])
B3.T <- length (B3 [B3 == "T"])
B3.C <- length (B3 [B3 == "C"])
B3.G <- length (B3 [B3 == "G"])
count.matrix.A <- matrix (c (A1.A, A1.T, A1.C, A1.G, A2.A, A2.T, A2.C, A2.G, A3.A, A3.T, A3.C, A3.G), ncol=4, byrow=T)
count.matrix.B <- matrix (c (B1.A, B1.T, B1.C, B1.G, B2.A, B2.T, B2.C, B2.G, B3.A, B3.T, B3.C, B3.G), ncol=4, byrow=T)
colnames (count.matrix.A) <- c ("A", "T", "C", "G")
colnames (count.matrix.B) <- c ("A", "T", "C", "G")
## PA calculation:
frequency.matrix.A <- matrix (rep (NA, length (count.matrix.A)), ncol=4, byrow=T)
frequency.matrix.B <- matrix (rep (NA, length (count.matrix.B)), ncol=4, byrow=T)
for (i in 1: length (count.matrix.A))
{
frequency.matrix.A[i] <- round((count.matrix.A [i] / 133), digits=3)
}
for (j in 1: length (count.matrix.B))
{
frequency.matrix.B[j] <- round((count.matrix.B [j] / 342), digits=3)
}
PA.A <- sum((0.25-frequency.matrix.A)^2)
PA.B <- sum((0.25-frequency.matrix.B)^2)
B3.A
B3.T
seq1 <- c("ATTCTTTTACTCAAGAATGCATGGAGGAGAAATCTTTCTTTTGCCGTGTCAG")
seq1 <- c("ATTCTTTTACTCAAGAATGCATGGAGGAGAAATCTTTCTTTTGCCGTGTCAG")
count.seq1 <- count(seq1)
count.seq1 <- length(seq1)
count.seq1
count.seq1 <- length(1:seq1)
seq1 <- c("ATTCTTTTACTCAAGAATGCATGGAGGAGAAATCTTTCTTTTGCCGTGTCAG")
count.seq1 <- 1:length(seq1)
count.seq1
length(seq1)
unlist(seq1)
seq1 <- c("ATTCTTTTACTCAAGAATGCATGGAGGAGAAATCTTTCTTTTGCCGTGTCAG")
unlist(seq1)
count.seq1 <- 1:length(seq1)
length(seq1)
charray <- c("ATTCTTTTACTCAAGAATGCATGGAGGAGAAATCTTTCTTTTGCCGTGTCAG")
unlist(seq1)
count.seq1 <- 1:length(seq1)
count.bases <- function(charray)
{
return(c(A=length(which(charray =="A")),
C=length(which(charray =="C")),
G=length(which(charray =="G")),
T=length(which(charray =="T"))))
}
count.bases
count.bases(charray)
seq1 <- c("ATTCTTTTACTCAAGAATGCATGGAGGAGAAATCTTTCTTTTGCCGTGTCAG")
unlist(seq1)
count.seq1 <- 1:length(seq1)
count.bases <- function(charray)
{
return(c(A=length(which(charray =="A")),
C=length(which(charray =="C")),
G=length(which(charray =="G")),
T=length(which(charray =="T"))))
}
count.bases(seq1)
seq1 <- c("ATTCTTTTACTCAAGAATGCATGGAGGAGAAATCTTTCTTTTGCCGTGTCAG")
unlist(seq1)
count.seq1 <- 1:length(seq1)
count.bases <- function(seq1)
{
return(c(A=length(which(seq1 =="A")),
C=length(which(seq1 =="C")),
G=length(which(seq1 =="G")),
T=length(which(seq1 =="T"))))
}
count.bases(seq1)
## R SCRIPT FOR PA CALCULATION:
## Reading the sequences and processing them into matrices MTX.A and MTX.B
sequence.A <- readLines (file("http://j.mp/ifNNaE"))
length.seqA <- sequence.A [2: length (sequence.A)]
table.A <- mapply (substr, length.seqA, 1:399, 1:399, USE.NAMES=FALSE)
MTX.A <- matrix (table.A, ncol=3, byrow=T)
sequence.B <- readLines (file("http://j.mp/gXjItZ"))
length.seqB <- sequence.B [2: length (sequence.B)]
table.B <- mapply (substr, length.seqB, 1:1026, 1:1026, USE.NAMES=FALSE)
MTX.B <- matrix (table.B, ncol=3, byrow=T)
## Constructing Positional Count Matrix (PCM) for sequences A and B:
A1 <- MTX.A [ ,1]
A1.A <- length (A1 [A1 == "A"])
A1.C <- length (A1 [A1 == "C"])
A1.G <- length (A1 [A1 == "G"])
A1.T <- length (A1 [A1 == "T"])
A2 <- MTX.A [ ,2]
A2.A <- length (A2 [A2 == "A"])
A2.C <- length (A2 [A2 == "C"])
A2.G <- length (A2 [A2 == "G"])
A2.T <- length (A2 [A2 == "T"])
A3 <- MTX.A [ ,3]
A3.A <- length (A3 [A3 == "A"])
A3.C <- length (A3 [A3 == "C"])
A3.G <- length (A3 [A3 == "G"])
A3.T <- length (A3 [A3 == "T"])
B1 <- MTX.B[ ,1]
B1.A <- length (B1 [B1 == "A"])
B1.T <- length (B1 [B1 == "T"])
B1.C <- length (B1 [B1 == "C"])
B1.G <- length (B1 [B1 == "G"])
B2 <- MTX.B[ ,2]
B2.A <- length (B2 [B2 == "A"])
B2.T <- length (B2 [B2 == "T"])
B2.C <- length (B2 [B2 == "C"])
B2.G <- length (B2 [B2 == "G"])
B3 <- MTX.B[ ,3]
B3.A <- length (B3 [B3 == "A"])
B3.T <- length (B3 [B3 == "T"])
B3.C <- length (B3 [B3 == "C"])
B3.G <- length (B3 [B3 == "G"])
## Counting MTX.A and MTX.B
CNT.MTX.A <- matrix (c (A1.A, A1.T, A1.C, A1.G, A2.A, A2.T, A2.C, A2.G, A3.A, A3.T, A3.C, A3.G), ncol=4, byrow=T)
CNT.MTX.B <- matrix (c (B1.A, B1.T, B1.C, B1.G, B2.A, B2.T, B2.C, B2.G, B3.A, B3.T, B3.C, B3.G), ncol=4, byrow=T)
colnames (CNT.MTX.A) <- c ("A", "T", "C", "G")
colnames (CNT.MTX.B) <- c ("A", "T", "C", "G")
## Calculation Postion Asymmetry (PA)
freq.MTX.A <- matrix (rep (NA, length (CNT.MTX.A)), ncol=4, byrow=T)
freq.MTX.B <- matrix (rep (NA, length (CNT.MTX.B)), ncol=4, byrow=T)
for (i in 1: length (CNT.MTX.A))
{
freq.MTX.A[i] <- round((CNT.MTX.A [i] / 133), digits=3)
}
for (j in 1: length (CNT.MTX.B))
{
freq.MTX.B[j] <- round((CNT.MTX.B [j] / 342), digits=3)
}
PA.A <- sum((0.25-freq.MTX.A)^2)
PA.B <- sum((0.25-freq.MTX.B)^2)
## R SCRIPT FOR PA CALCULATION:
## Reading the sequences and processing them into matrices MTX.A and MTX.B
sequence.A <- readLines (file("http://j.mp/ifNNaE"))
length.seqA <- sequence.A [2: length (sequence.A)]
table.A <- mapply (substr, length.seqA, 1:399, 1:399, USE.NAMES=FALSE)
MTX.A <- matrix (table.A, ncol=3, byrow=T)
sequence.B <- readLines (file("http://j.mp/gXjItZ"))
length.seqB <- sequence.B [2: length (sequence.B)]
table.B <- mapply (substr, length.seqB, 1:1026, 1:1026, USE.NAMES=FALSE)
MTX.B <- matrix (table.B, ncol=3, byrow=T)
## Constructing Positional Count Matrix (PCM) for sequences A and B:
A1 <- MTX.A [ ,1]
A1.A <- length (A1 [A1 == "A"])
A1.C <- length (A1 [A1 == "C"])
A1.G <- length (A1 [A1 == "G"])
A1.T <- length (A1 [A1 == "T"])
A2 <- MTX.A [ ,2]
A2.A <- length (A2 [A2 == "A"])
A2.C <- length (A2 [A2 == "C"])
A2.G <- length (A2 [A2 == "G"])
A2.T <- length (A2 [A2 == "T"])
A3 <- MTX.A [ ,3]
A3.A <- length (A3 [A3 == "A"])
A3.C <- length (A3 [A3 == "C"])
A3.G <- length (A3 [A3 == "G"])
A3.T <- length (A3 [A3 == "T"])
B1 <- MTX.B[ ,1]
B1.A <- length (B1 [B1 == "A"])
B1.T <- length (B1 [B1 == "T"])
B1.C <- length (B1 [B1 == "C"])
B1.G <- length (B1 [B1 == "G"])
B2 <- MTX.B[ ,2]
B2.A <- length (B2 [B2 == "A"])
B2.T <- length (B2 [B2 == "T"])
B2.C <- length (B2 [B2 == "C"])
B2.G <- length (B2 [B2 == "G"])
B3 <- MTX.B[ ,3]
B3.A <- length (B3 [B3 == "A"])
B3.T <- length (B3 [B3 == "T"])
B3.C <- length (B3 [B3 == "C"])
B3.G <- length (B3 [B3 == "G"])
## Counting MTX.A and MTX.B
CNT.MTX.A <- matrix (c (A1.A, A1.T, A1.C, A1.G, A2.A, A2.T, A2.C, A2.G, A3.A, A3.T, A3.C, A3.G), ncol=4, byrow=T)
CNT.MTX.B <- matrix (c (B1.A, B1.T, B1.C, B1.G, B2.A, B2.T, B2.C, B2.G, B3.A, B3.T, B3.C, B3.G), ncol=4, byrow=T)
colnames (CNT.MTX.A) <- c ("A", "T", "C", "G")
colnames (CNT.MTX.B) <- c ("A", "T", "C", "G")
## Creating the functions for calculating Postion Asymmetry (PA)
freq.MTX.A <- matrix (rep (NA, length (CNT.MTX.A)), ncol=4, byrow=T)
freq.MTX.B <- matrix (rep (NA, length (CNT.MTX.B)), ncol=4, byrow=T)
for (i in 1: length (CNT.MTX.A))
{
freq.MTX.A[i] <- round((CNT.MTX.A [i] / 133), digits=3)
}
for (j in 1: length (CNT.MTX.B))
{
freq.MTX.B[j] <- round((CNT.MTX.B [j] / 342), digits=3)
}
## Calculating PA for sequences A and B
PA.A <- sum((0.25-freq.MTX.A)^2)
PA.B <- sum((0.25-freq.MTX.B)^2)
PA.A
PA.B
## R script for calculating the Position Asymmetry of sequences A and B
## Reading the sequences and processing them into matrices MTX.A and MTX.B
## Processing sequence A
sequence.A <- readLines (file("http://j.mp/ifNNaE"))
length.seqA <- sequence.A [2: length (sequence.A)]
table.A <- mapply (substr, length.seqA, 1:399, 1:399, USE.NAMES=FALSE)
MTX.A <- matrix (table.A, ncol=3, byrow=T)
## Processing sequence B
sequence.B <- readLines (file("http://j.mp/gXjItZ"))
length.seqB <- sequence.B [2: length (sequence.B)]
table.B <- mapply (substr, length.seqB, 1:1026, 1:1026, USE.NAMES=FALSE)
MTX.B <- matrix (table.B, ncol=3, byrow=T)
## Constructing Positional Count Matrix (PCM) for sequences A and B:
## PCM for A
A1 <- MTX.A [ ,1]
A1.A <- length (A1 [A1 == "A"])
A1.C <- length (A1 [A1 == "C"])
A1.G <- length (A1 [A1 == "G"])
A1.T <- length (A1 [A1 == "T"])
A2 <- MTX.A [ ,2]
A2.A <- length (A2 [A2 == "A"])
A2.C <- length (A2 [A2 == "C"])
A2.G <- length (A2 [A2 == "G"])
A2.T <- length (A2 [A2 == "T"])
A3 <- MTX.A [ ,3]
A3.A <- length (A3 [A3 == "A"])
A3.C <- length (A3 [A3 == "C"])
A3.G <- length (A3 [A3 == "G"])
A3.T <- length (A3 [A3 == "T"])
## PCM for B
B1 <- MTX.B[ ,1]
B1.A <- length (B1 [B1 == "A"])
B1.T <- length (B1 [B1 == "T"])
B1.C <- length (B1 [B1 == "C"])
B1.G <- length (B1 [B1 == "G"])
B2 <- MTX.B[ ,2]
B2.A <- length (B2 [B2 == "A"])
B2.T <- length (B2 [B2 == "T"])
B2.C <- length (B2 [B2 == "C"])
B2.G <- length (B2 [B2 == "G"])
B3 <- MTX.B[ ,3]
B3.A <- length (B3 [B3 == "A"])
B3.T <- length (B3 [B3 == "T"])
B3.C <- length (B3 [B3 == "C"])
B3.G <- length (B3 [B3 == "G"])
## Counting MTX.A and MTX.B
CNT.MTX.A <- matrix (c (A1.A, A1.T, A1.C, A1.G, A2.A, A2.T, A2.C, A2.G, A3.A, A3.T, A3.C, A3.G), ncol=4, byrow=T)
CNT.MTX.B <- matrix (c (B1.A, B1.T, B1.C, B1.G, B2.A, B2.T, B2.C, B2.G, B3.A, B3.T, B3.C, B3.G), ncol=4, byrow=T)
colnames (CNT.MTX.A) <- c ("A", "T", "C", "G")
colnames (CNT.MTX.B) <- c ("A", "T", "C", "G")
## Creating the functions for calculating Postion Asymmetry (PA)
freq.MTX.A <- matrix (rep (NA, length (CNT.MTX.A)), ncol=4, byrow=T)
freq.MTX.B <- matrix (rep (NA, length (CNT.MTX.B)), ncol=4, byrow=T)
for (i in 1: length (CNT.MTX.A))
{
freq.MTX.A[i] <- round((CNT.MTX.A [i] / 133), digits=3)
}
for (j in 1: length (CNT.MTX.B))
{
freq.MTX.B[j] <- round((CNT.MTX.B [j] / 342), digits=3)
}
## Calculating PA for sequences A and B
PA.A <- sum((0.25-freq.MTX.A)^2)
PA.B <- sum((0.25-freq.MTX.B)^2)
?read.table
source("http://bioconductor.org/biocLite.R")
biocLite()
View(CNT.MTX.A)
View(CNT.MTX.A)
install.packages("devtools")
library(devtools)
install_github("genomicsclass/dagdata")
install_github("ririzarr/rafalib")
?head
install.packages("~/clocknet_1.3.tar.gz", repos = NULL, type = "source")
tidydataset <- read.csv("~/Desktop/Getting-and-Cleaning-Data/Course Project/tidydataset.txt")
View(tidydataset)
install.packages("deSolve")
install.packages("nlmrt")
install.packages("~/clocknet_1.3.tar.gz", repos = NULL, type = "source")
library("clocknet", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
CVT
test <- CVT(k = 9, dim = 2, upper = 10, lower = 0)
plot(test)
test <- CVT(k = 9, dim = 2, upper = 10, lower = 0, q = 50, iter = 100)
plot(test)
test <- CVT(k = 9, dim = 2, upper = 10, lower = 0, q = 50, iter = 10000)
plot(test)
test <- CVT(k = 8, dim = 3, upper = 10, lower = 0, q = 50, iter = 10000)
plot(test)
test <- CVT(k = 8, dim = 6, upper = 10, lower = 0, q = 50, iter = 100)
plot(test)
?quote
?Quotesuote
?Quotes
?regex
x <- "theslim()work"
y <- x[gsub("\\(", "", x)]
y <- gsub("\\(", "", x)
y <- gsub("\(", "", x)
y <- gsub("(", "", x)
y <- gsub("[:(:]", "", x)
y <- gsub("[:():]", "", x)
test <- CVT(k = 8, dim = 9, upper = 10, lower = 0, q = 50, iter = 10000)
plot(test)
demo()
